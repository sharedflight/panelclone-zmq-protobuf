// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: event.proto
// Protobuf C++ Version: 5.28.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_event_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_event_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_event_2eproto;
namespace panelclone {
class DrefByteValue;
struct DrefByteValueDefaultTypeInternal;
extern DrefByteValueDefaultTypeInternal _DrefByteValue_default_instance_;
class DrefFloatArrayValue;
struct DrefFloatArrayValueDefaultTypeInternal;
extern DrefFloatArrayValueDefaultTypeInternal _DrefFloatArrayValue_default_instance_;
class DrefIntArrayValue;
struct DrefIntArrayValueDefaultTypeInternal;
extern DrefIntArrayValueDefaultTypeInternal _DrefIntArrayValue_default_instance_;
class DrefSend;
struct DrefSendDefaultTypeInternal;
extern DrefSendDefaultTypeInternal _DrefSend_default_instance_;
class DrefValue;
struct DrefValueDefaultTypeInternal;
extern DrefValueDefaultTypeInternal _DrefValue_default_instance_;
class PubValIndex;
struct PubValIndexDefaultTypeInternal;
extern PubValIndexDefaultTypeInternal _PubValIndex_default_instance_;
class PushEvent;
struct PushEventDefaultTypeInternal;
extern PushEventDefaultTypeInternal _PushEvent_default_instance_;
class PushUpdate;
struct PushUpdateDefaultTypeInternal;
extern PushUpdateDefaultTypeInternal _PushUpdate_default_instance_;
class RegisterDref;
struct RegisterDrefDefaultTypeInternal;
extern RegisterDrefDefaultTypeInternal _RegisterDref_default_instance_;
class Snapshot;
struct SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class StateRequest;
struct StateRequestDefaultTypeInternal;
extern StateRequestDefaultTypeInternal _StateRequest_default_instance_;
class StateUpdate;
struct StateUpdateDefaultTypeInternal;
extern StateUpdateDefaultTypeInternal _StateUpdate_default_instance_;
class x264FrameData;
struct x264FrameDataDefaultTypeInternal;
extern x264FrameDataDefaultTypeInternal _x264FrameData_default_instance_;
}  // namespace panelclone
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace panelclone {

// ===================================================================


// -------------------------------------------------------------------

class x264FrameData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.x264FrameData) */ {
 public:
  inline x264FrameData() : x264FrameData(nullptr) {}
  ~x264FrameData() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR x264FrameData(
      ::google::protobuf::internal::ConstantInitialized);

  inline x264FrameData(const x264FrameData& from) : x264FrameData(nullptr, from) {}
  inline x264FrameData(x264FrameData&& from) noexcept
      : x264FrameData(nullptr, std::move(from)) {}
  inline x264FrameData& operator=(const x264FrameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline x264FrameData& operator=(x264FrameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const x264FrameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const x264FrameData* internal_default_instance() {
    return reinterpret_cast<const x264FrameData*>(
        &_x264FrameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(x264FrameData& a, x264FrameData& b) { a.Swap(&b); }
  inline void Swap(x264FrameData* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(x264FrameData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  x264FrameData* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<x264FrameData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const x264FrameData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const x264FrameData& from) { x264FrameData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(x264FrameData* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.x264FrameData"; }

 protected:
  explicit x264FrameData(::google::protobuf::Arena* arena);
  x264FrameData(::google::protobuf::Arena* arena, const x264FrameData& from);
  x264FrameData(::google::protobuf::Arena* arena, x264FrameData&& from) noexcept
      : x264FrameData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kImageBytesFieldNumber = 4,
    kColsFieldNumber = 1,
    kRowsFieldNumber = 2,
    kChannelsFieldNumber = 3,
  };
  // bytes image_bytes = 4;
  void clear_image_bytes() ;
  const std::string& image_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_image_bytes();
  PROTOBUF_NODISCARD std::string* release_image_bytes();
  void set_allocated_image_bytes(std::string* value);

  private:
  const std::string& _internal_image_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_bytes(
      const std::string& value);
  std::string* _internal_mutable_image_bytes();

  public:
  // int32 cols = 1;
  void clear_cols() ;
  ::int32_t cols() const;
  void set_cols(::int32_t value);

  private:
  ::int32_t _internal_cols() const;
  void _internal_set_cols(::int32_t value);

  public:
  // int32 rows = 2;
  void clear_rows() ;
  ::int32_t rows() const;
  void set_rows(::int32_t value);

  private:
  ::int32_t _internal_rows() const;
  void _internal_set_rows(::int32_t value);

  public:
  // int32 channels = 3;
  void clear_channels() ;
  ::int32_t channels() const;
  void set_channels(::int32_t value);

  private:
  ::int32_t _internal_channels() const;
  void _internal_set_channels(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.x264FrameData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_x264FrameData_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const x264FrameData& from_msg);
    ::google::protobuf::internal::ArenaStringPtr image_bytes_;
    ::int32_t cols_;
    ::int32_t rows_;
    ::int32_t channels_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class RegisterDref final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.RegisterDref) */ {
 public:
  inline RegisterDref() : RegisterDref(nullptr) {}
  ~RegisterDref() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterDref(
      ::google::protobuf::internal::ConstantInitialized);

  inline RegisterDref(const RegisterDref& from) : RegisterDref(nullptr, from) {}
  inline RegisterDref(RegisterDref&& from) noexcept
      : RegisterDref(nullptr, std::move(from)) {}
  inline RegisterDref& operator=(const RegisterDref& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterDref& operator=(RegisterDref&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterDref& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterDref* internal_default_instance() {
    return reinterpret_cast<const RegisterDref*>(
        &_RegisterDref_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(RegisterDref& a, RegisterDref& b) { a.Swap(&b); }
  inline void Swap(RegisterDref* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterDref* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterDref* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<RegisterDref>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterDref& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RegisterDref& from) { RegisterDref::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterDref* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.RegisterDref"; }

 protected:
  explicit RegisterDref(::google::protobuf::Arena* arena);
  RegisterDref(::google::protobuf::Arena* arena, const RegisterDref& from);
  RegisterDref(::google::protobuf::Arena* arena, RegisterDref&& from) noexcept
      : RegisterDref(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatarefFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string dataref = 1;
  void clear_dataref() ;
  const std::string& dataref() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataref(Arg_&& arg, Args_... args);
  std::string* mutable_dataref();
  PROTOBUF_NODISCARD std::string* release_dataref();
  void set_allocated_dataref(std::string* value);

  private:
  const std::string& _internal_dataref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataref(
      const std::string& value);
  std::string* _internal_mutable_dataref();

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.RegisterDref)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RegisterDref_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RegisterDref& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dataref_;
    ::int32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class PubValIndex final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.PubValIndex) */ {
 public:
  inline PubValIndex() : PubValIndex(nullptr) {}
  ~PubValIndex() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PubValIndex(
      ::google::protobuf::internal::ConstantInitialized);

  inline PubValIndex(const PubValIndex& from) : PubValIndex(nullptr, from) {}
  inline PubValIndex(PubValIndex&& from) noexcept
      : PubValIndex(nullptr, std::move(from)) {}
  inline PubValIndex& operator=(const PubValIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline PubValIndex& operator=(PubValIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PubValIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const PubValIndex* internal_default_instance() {
    return reinterpret_cast<const PubValIndex*>(
        &_PubValIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PubValIndex& a, PubValIndex& b) { a.Swap(&b); }
  inline void Swap(PubValIndex* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PubValIndex* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PubValIndex* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<PubValIndex>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PubValIndex& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PubValIndex& from) { PubValIndex::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PubValIndex* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.PubValIndex"; }

 protected:
  explicit PubValIndex(::google::protobuf::Arena* arena);
  PubValIndex(::google::protobuf::Arena* arena, const PubValIndex& from);
  PubValIndex(::google::protobuf::Arena* arena, PubValIndex&& from) noexcept
      : PubValIndex(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatarefFieldNumber = 2,
    kIndexFieldNumber = 1,
    kDrefIndexFieldNumber = 3,
  };
  // string dataref = 2;
  void clear_dataref() ;
  const std::string& dataref() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataref(Arg_&& arg, Args_... args);
  std::string* mutable_dataref();
  PROTOBUF_NODISCARD std::string* release_dataref();
  void set_allocated_dataref(std::string* value);

  private:
  const std::string& _internal_dataref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataref(
      const std::string& value);
  std::string* _internal_mutable_dataref();

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 dref_index = 3;
  void clear_dref_index() ;
  ::int32_t dref_index() const;
  void set_dref_index(::int32_t value);

  private:
  ::int32_t _internal_dref_index() const;
  void _internal_set_dref_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.PubValIndex)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      38, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PubValIndex_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PubValIndex& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dataref_;
    ::int32_t index_;
    ::int32_t dref_index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class DrefSend final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.DrefSend) */ {
 public:
  inline DrefSend() : DrefSend(nullptr) {}
  ~DrefSend() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrefSend(
      ::google::protobuf::internal::ConstantInitialized);

  inline DrefSend(const DrefSend& from) : DrefSend(nullptr, from) {}
  inline DrefSend(DrefSend&& from) noexcept
      : DrefSend(nullptr, std::move(from)) {}
  inline DrefSend& operator=(const DrefSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrefSend& operator=(DrefSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrefSend& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntVal = 3,
    kFloatVal = 4,
    kStringVal = 5,
    VALUE_NOT_SET = 0,
  };
  static inline const DrefSend* internal_default_instance() {
    return reinterpret_cast<const DrefSend*>(
        &_DrefSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(DrefSend& a, DrefSend& b) { a.Swap(&b); }
  inline void Swap(DrefSend* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrefSend* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrefSend* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DrefSend>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrefSend& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrefSend& from) { DrefSend::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DrefSend* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.DrefSend"; }

 protected:
  explicit DrefSend(::google::protobuf::Arena* arena);
  DrefSend(::google::protobuf::Arena* arena, const DrefSend& from);
  DrefSend(::google::protobuf::Arena* arena, DrefSend&& from) noexcept
      : DrefSend(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDatarefFieldNumber = 1,
    kIndexFieldNumber = 2,
    kIntValFieldNumber = 3,
    kFloatValFieldNumber = 4,
    kStringValFieldNumber = 5,
  };
  // string dataref = 1;
  void clear_dataref() ;
  const std::string& dataref() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_dataref(Arg_&& arg, Args_... args);
  std::string* mutable_dataref();
  PROTOBUF_NODISCARD std::string* release_dataref();
  void set_allocated_dataref(std::string* value);

  private:
  const std::string& _internal_dataref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dataref(
      const std::string& value);
  std::string* _internal_mutable_dataref();

  public:
  // int32 index = 2;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 intVal = 3;
  bool has_intval() const;
  void clear_intval() ;
  ::int32_t intval() const;
  void set_intval(::int32_t value);

  private:
  ::int32_t _internal_intval() const;
  void _internal_set_intval(::int32_t value);

  public:
  // float floatVal = 4;
  bool has_floatval() const;
  void clear_floatval() ;
  float floatval() const;
  void set_floatval(float value);

  private:
  float _internal_floatval() const;
  void _internal_set_floatval(float value);

  public:
  // string stringVal = 5;
  bool has_stringval() const;
  void clear_stringval() ;
  const std::string& stringval() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stringval(Arg_&& arg, Args_... args);
  std::string* mutable_stringval();
  PROTOBUF_NODISCARD std::string* release_stringval();
  void set_allocated_stringval(std::string* value);

  private:
  const std::string& _internal_stringval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringval(
      const std::string& value);
  std::string* _internal_mutable_stringval();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:panelclone.DrefSend)
 private:
  class _Internal;
  void set_has_intval();
  void set_has_floatval();
  void set_has_stringval();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DrefSend_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DrefSend& from_msg);
    ::google::protobuf::internal::ArenaStringPtr dataref_;
    ::int32_t index_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t intval_;
      float floatval_;
      ::google::protobuf::internal::ArenaStringPtr stringval_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class DrefIntArrayValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.DrefIntArrayValue) */ {
 public:
  inline DrefIntArrayValue() : DrefIntArrayValue(nullptr) {}
  ~DrefIntArrayValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrefIntArrayValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline DrefIntArrayValue(const DrefIntArrayValue& from) : DrefIntArrayValue(nullptr, from) {}
  inline DrefIntArrayValue(DrefIntArrayValue&& from) noexcept
      : DrefIntArrayValue(nullptr, std::move(from)) {}
  inline DrefIntArrayValue& operator=(const DrefIntArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrefIntArrayValue& operator=(DrefIntArrayValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrefIntArrayValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrefIntArrayValue* internal_default_instance() {
    return reinterpret_cast<const DrefIntArrayValue*>(
        &_DrefIntArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DrefIntArrayValue& a, DrefIntArrayValue& b) { a.Swap(&b); }
  inline void Swap(DrefIntArrayValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrefIntArrayValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrefIntArrayValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DrefIntArrayValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrefIntArrayValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrefIntArrayValue& from) { DrefIntArrayValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DrefIntArrayValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.DrefIntArrayValue"; }

 protected:
  explicit DrefIntArrayValue(::google::protobuf::Arena* arena);
  DrefIntArrayValue(::google::protobuf::Arena* arena, const DrefIntArrayValue& from);
  DrefIntArrayValue(::google::protobuf::Arena* arena, DrefIntArrayValue&& from) noexcept
      : DrefIntArrayValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // int32 value = 1;
  void clear_value() ;
  ::int32_t value() const;
  void set_value(::int32_t value);

  private:
  ::int32_t _internal_value() const;
  void _internal_set_value(::int32_t value);

  public:
  // uint32 index = 2;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.DrefIntArrayValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DrefIntArrayValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DrefIntArrayValue& from_msg);
    ::int32_t value_;
    ::uint32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class DrefFloatArrayValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.DrefFloatArrayValue) */ {
 public:
  inline DrefFloatArrayValue() : DrefFloatArrayValue(nullptr) {}
  ~DrefFloatArrayValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrefFloatArrayValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline DrefFloatArrayValue(const DrefFloatArrayValue& from) : DrefFloatArrayValue(nullptr, from) {}
  inline DrefFloatArrayValue(DrefFloatArrayValue&& from) noexcept
      : DrefFloatArrayValue(nullptr, std::move(from)) {}
  inline DrefFloatArrayValue& operator=(const DrefFloatArrayValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrefFloatArrayValue& operator=(DrefFloatArrayValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrefFloatArrayValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrefFloatArrayValue* internal_default_instance() {
    return reinterpret_cast<const DrefFloatArrayValue*>(
        &_DrefFloatArrayValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(DrefFloatArrayValue& a, DrefFloatArrayValue& b) { a.Swap(&b); }
  inline void Swap(DrefFloatArrayValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrefFloatArrayValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrefFloatArrayValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DrefFloatArrayValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrefFloatArrayValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrefFloatArrayValue& from) { DrefFloatArrayValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DrefFloatArrayValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.DrefFloatArrayValue"; }

 protected:
  explicit DrefFloatArrayValue(::google::protobuf::Arena* arena);
  DrefFloatArrayValue(::google::protobuf::Arena* arena, const DrefFloatArrayValue& from);
  DrefFloatArrayValue(::google::protobuf::Arena* arena, DrefFloatArrayValue&& from) noexcept
      : DrefFloatArrayValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // float value = 1;
  void clear_value() ;
  float value() const;
  void set_value(float value);

  private:
  float _internal_value() const;
  void _internal_set_value(float value);

  public:
  // uint32 index = 2;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.DrefFloatArrayValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DrefFloatArrayValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DrefFloatArrayValue& from_msg);
    float value_;
    ::uint32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class DrefByteValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.DrefByteValue) */ {
 public:
  inline DrefByteValue() : DrefByteValue(nullptr) {}
  ~DrefByteValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrefByteValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline DrefByteValue(const DrefByteValue& from) : DrefByteValue(nullptr, from) {}
  inline DrefByteValue(DrefByteValue&& from) noexcept
      : DrefByteValue(nullptr, std::move(from)) {}
  inline DrefByteValue& operator=(const DrefByteValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrefByteValue& operator=(DrefByteValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrefByteValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrefByteValue* internal_default_instance() {
    return reinterpret_cast<const DrefByteValue*>(
        &_DrefByteValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(DrefByteValue& a, DrefByteValue& b) { a.Swap(&b); }
  inline void Swap(DrefByteValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrefByteValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrefByteValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DrefByteValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrefByteValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrefByteValue& from) { DrefByteValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DrefByteValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.DrefByteValue"; }

 protected:
  explicit DrefByteValue(::google::protobuf::Arena* arena);
  DrefByteValue(::google::protobuf::Arena* arena, const DrefByteValue& from);
  DrefByteValue(::google::protobuf::Arena* arena, DrefByteValue&& from) noexcept
      : DrefByteValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // bytes value = 1;
  void clear_value() ;
  const std::string& value() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_value(Arg_&& arg, Args_... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);

  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(
      const std::string& value);
  std::string* _internal_mutable_value();

  public:
  // uint32 size = 2;
  void clear_size() ;
  ::uint32_t size() const;
  void set_size(::uint32_t value);

  private:
  ::uint32_t _internal_size() const;
  void _internal_set_size(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.DrefByteValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DrefByteValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DrefByteValue& from_msg);
    ::google::protobuf::internal::ArenaStringPtr value_;
    ::uint32_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class StateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.StateRequest) */ {
 public:
  inline StateRequest() : StateRequest(nullptr) {}
  ~StateRequest() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StateRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline StateRequest(const StateRequest& from) : StateRequest(nullptr, from) {}
  inline StateRequest(StateRequest&& from) noexcept
      : StateRequest(nullptr, std::move(from)) {}
  inline StateRequest& operator=(const StateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateRequest& operator=(StateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateRequest* internal_default_instance() {
    return reinterpret_cast<const StateRequest*>(
        &_StateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StateRequest& a, StateRequest& b) { a.Swap(&b); }
  inline void Swap(StateRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateRequest* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StateRequest& from) { StateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StateRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.StateRequest"; }

 protected:
  explicit StateRequest(::google::protobuf::Arena* arena);
  StateRequest(::google::protobuf::Arena* arena, const StateRequest& from);
  StateRequest(::google::protobuf::Arena* arena, StateRequest&& from) noexcept
      : StateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDrefsFieldNumber = 2,
  };
  // repeated .panelclone.RegisterDref drefs = 2;
  int drefs_size() const;
  private:
  int _internal_drefs_size() const;

  public:
  void clear_drefs() ;
  ::panelclone::RegisterDref* mutable_drefs(int index);
  ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>* mutable_drefs();

  private:
  const ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>& _internal_drefs() const;
  ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>* _internal_mutable_drefs();
  public:
  const ::panelclone::RegisterDref& drefs(int index) const;
  ::panelclone::RegisterDref* add_drefs();
  const ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>& drefs() const;
  // @@protoc_insertion_point(class_scope:panelclone.StateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StateRequest_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StateRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::panelclone::RegisterDref > drefs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class DrefValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.DrefValue) */ {
 public:
  inline DrefValue() : DrefValue(nullptr) {}
  ~DrefValue() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DrefValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline DrefValue(const DrefValue& from) : DrefValue(nullptr, from) {}
  inline DrefValue(DrefValue&& from) noexcept
      : DrefValue(nullptr, std::move(from)) {}
  inline DrefValue& operator=(const DrefValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrefValue& operator=(DrefValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrefValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIntVal = 2,
    kFloatVal = 3,
    kDoubleVal = 6,
    kByteVal = 7,
    VALUE_NOT_SET = 0,
  };
  static inline const DrefValue* internal_default_instance() {
    return reinterpret_cast<const DrefValue*>(
        &_DrefValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(DrefValue& a, DrefValue& b) { a.Swap(&b); }
  inline void Swap(DrefValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrefValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrefValue* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<DrefValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DrefValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DrefValue& from) { DrefValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DrefValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.DrefValue"; }

 protected:
  explicit DrefValue(::google::protobuf::Arena* arena);
  DrefValue(::google::protobuf::Arena* arena, const DrefValue& from);
  DrefValue(::google::protobuf::Arena* arena, DrefValue&& from) noexcept
      : DrefValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndexFieldNumber = 1,
    kIntValFieldNumber = 2,
    kFloatValFieldNumber = 3,
    kDoubleValFieldNumber = 6,
    kByteValFieldNumber = 7,
  };
  // uint32 index = 1;
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // int32 intVal = 2;
  bool has_intval() const;
  void clear_intval() ;
  ::int32_t intval() const;
  void set_intval(::int32_t value);

  private:
  ::int32_t _internal_intval() const;
  void _internal_set_intval(::int32_t value);

  public:
  // float floatVal = 3;
  bool has_floatval() const;
  void clear_floatval() ;
  float floatval() const;
  void set_floatval(float value);

  private:
  float _internal_floatval() const;
  void _internal_set_floatval(float value);

  public:
  // double doubleVal = 6;
  bool has_doubleval() const;
  void clear_doubleval() ;
  double doubleval() const;
  void set_doubleval(double value);

  private:
  double _internal_doubleval() const;
  void _internal_set_doubleval(double value);

  public:
  // .panelclone.DrefByteValue byteVal = 7;
  bool has_byteval() const;
  private:
  bool _internal_has_byteval() const;

  public:
  void clear_byteval() ;
  const ::panelclone::DrefByteValue& byteval() const;
  PROTOBUF_NODISCARD ::panelclone::DrefByteValue* release_byteval();
  ::panelclone::DrefByteValue* mutable_byteval();
  void set_allocated_byteval(::panelclone::DrefByteValue* value);
  void unsafe_arena_set_allocated_byteval(::panelclone::DrefByteValue* value);
  ::panelclone::DrefByteValue* unsafe_arena_release_byteval();

  private:
  const ::panelclone::DrefByteValue& _internal_byteval() const;
  ::panelclone::DrefByteValue* _internal_mutable_byteval();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:panelclone.DrefValue)
 private:
  class _Internal;
  void set_has_intval();
  void set_has_floatval();
  void set_has_doubleval();
  void set_has_byteval();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DrefValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DrefValue& from_msg);
    ::uint32_t index_;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::int32_t intval_;
      float floatval_;
      double doubleval_;
      ::panelclone::DrefByteValue* byteval_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class StateUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.StateUpdate) */ {
 public:
  inline StateUpdate() : StateUpdate(nullptr) {}
  ~StateUpdate() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StateUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline StateUpdate(const StateUpdate& from) : StateUpdate(nullptr, from) {}
  inline StateUpdate(StateUpdate&& from) noexcept
      : StateUpdate(nullptr, std::move(from)) {}
  inline StateUpdate& operator=(const StateUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline StateUpdate& operator=(StateUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StateUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const StateUpdate* internal_default_instance() {
    return reinterpret_cast<const StateUpdate*>(
        &_StateUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StateUpdate& a, StateUpdate& b) { a.Swap(&b); }
  inline void Swap(StateUpdate* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StateUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StateUpdate* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<StateUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StateUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StateUpdate& from) { StateUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StateUpdate* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.StateUpdate"; }

 protected:
  explicit StateUpdate(::google::protobuf::Arena* arena);
  StateUpdate(::google::protobuf::Arena* arena, const StateUpdate& from);
  StateUpdate(::google::protobuf::Arena* arena, StateUpdate&& from) noexcept
      : StateUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublishedValueIndexesFieldNumber = 2,
    kDrefChangesFieldNumber = 3,
    kPanelFrameDataFieldNumber = 4,
    kFrameFieldNumber = 1,
  };
  // repeated .panelclone.PubValIndex publishedValueIndexes = 2;
  int publishedvalueindexes_size() const;
  private:
  int _internal_publishedvalueindexes_size() const;

  public:
  void clear_publishedvalueindexes() ;
  ::panelclone::PubValIndex* mutable_publishedvalueindexes(int index);
  ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>* mutable_publishedvalueindexes();

  private:
  const ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>& _internal_publishedvalueindexes() const;
  ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>* _internal_mutable_publishedvalueindexes();
  public:
  const ::panelclone::PubValIndex& publishedvalueindexes(int index) const;
  ::panelclone::PubValIndex* add_publishedvalueindexes();
  const ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>& publishedvalueindexes() const;
  // repeated .panelclone.DrefValue drefChanges = 3;
  int drefchanges_size() const;
  private:
  int _internal_drefchanges_size() const;

  public:
  void clear_drefchanges() ;
  ::panelclone::DrefValue* mutable_drefchanges(int index);
  ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>* mutable_drefchanges();

  private:
  const ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>& _internal_drefchanges() const;
  ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>* _internal_mutable_drefchanges();
  public:
  const ::panelclone::DrefValue& drefchanges(int index) const;
  ::panelclone::DrefValue* add_drefchanges();
  const ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>& drefchanges() const;
  // optional .panelclone.x264FrameData panelFrameData = 4;
  bool has_panelframedata() const;
  void clear_panelframedata() ;
  const ::panelclone::x264FrameData& panelframedata() const;
  PROTOBUF_NODISCARD ::panelclone::x264FrameData* release_panelframedata();
  ::panelclone::x264FrameData* mutable_panelframedata();
  void set_allocated_panelframedata(::panelclone::x264FrameData* value);
  void unsafe_arena_set_allocated_panelframedata(::panelclone::x264FrameData* value);
  ::panelclone::x264FrameData* unsafe_arena_release_panelframedata();

  private:
  const ::panelclone::x264FrameData& _internal_panelframedata() const;
  ::panelclone::x264FrameData* _internal_mutable_panelframedata();

  public:
  // uint32 frame = 1;
  void clear_frame() ;
  ::uint32_t frame() const;
  void set_frame(::uint32_t value);

  private:
  ::uint32_t _internal_frame() const;
  void _internal_set_frame(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:panelclone.StateUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_StateUpdate_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StateUpdate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::panelclone::PubValIndex > publishedvalueindexes_;
    ::google::protobuf::RepeatedPtrField< ::panelclone::DrefValue > drefchanges_;
    ::panelclone::x264FrameData* panelframedata_;
    ::uint32_t frame_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class PushEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.PushEvent) */ {
 public:
  inline PushEvent() : PushEvent(nullptr) {}
  ~PushEvent() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushEvent(const PushEvent& from) : PushEvent(nullptr, from) {}
  inline PushEvent(PushEvent&& from) noexcept
      : PushEvent(nullptr, std::move(from)) {}
  inline PushEvent& operator=(const PushEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushEvent& operator=(PushEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kDrefWrite = 1,
    kDrefSend = 2,
    EVENT_NOT_SET = 0,
  };
  static inline const PushEvent* internal_default_instance() {
    return reinterpret_cast<const PushEvent*>(
        &_PushEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PushEvent& a, PushEvent& b) { a.Swap(&b); }
  inline void Swap(PushEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushEvent* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<PushEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushEvent& from) { PushEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.PushEvent"; }

 protected:
  explicit PushEvent(::google::protobuf::Arena* arena);
  PushEvent(::google::protobuf::Arena* arena, const PushEvent& from);
  PushEvent(::google::protobuf::Arena* arena, PushEvent&& from) noexcept
      : PushEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDrefWriteFieldNumber = 1,
    kDrefSendFieldNumber = 2,
  };
  // .panelclone.DrefValue drefWrite = 1;
  bool has_drefwrite() const;
  private:
  bool _internal_has_drefwrite() const;

  public:
  void clear_drefwrite() ;
  const ::panelclone::DrefValue& drefwrite() const;
  PROTOBUF_NODISCARD ::panelclone::DrefValue* release_drefwrite();
  ::panelclone::DrefValue* mutable_drefwrite();
  void set_allocated_drefwrite(::panelclone::DrefValue* value);
  void unsafe_arena_set_allocated_drefwrite(::panelclone::DrefValue* value);
  ::panelclone::DrefValue* unsafe_arena_release_drefwrite();

  private:
  const ::panelclone::DrefValue& _internal_drefwrite() const;
  ::panelclone::DrefValue* _internal_mutable_drefwrite();

  public:
  // .panelclone.DrefSend drefSend = 2;
  bool has_drefsend() const;
  private:
  bool _internal_has_drefsend() const;

  public:
  void clear_drefsend() ;
  const ::panelclone::DrefSend& drefsend() const;
  PROTOBUF_NODISCARD ::panelclone::DrefSend* release_drefsend();
  ::panelclone::DrefSend* mutable_drefsend();
  void set_allocated_drefsend(::panelclone::DrefSend* value);
  void unsafe_arena_set_allocated_drefsend(::panelclone::DrefSend* value);
  ::panelclone::DrefSend* unsafe_arena_release_drefsend();

  private:
  const ::panelclone::DrefSend& _internal_drefsend() const;
  ::panelclone::DrefSend* _internal_mutable_drefsend();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:panelclone.PushEvent)
 private:
  class _Internal;
  void set_has_drefwrite();
  void set_has_drefsend();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PushEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushEvent& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::panelclone::DrefValue* drefwrite_;
      ::panelclone::DrefSend* drefsend_;
    } event_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class Snapshot final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.Snapshot) */ {
 public:
  inline Snapshot() : Snapshot(nullptr) {}
  ~Snapshot() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Snapshot(
      ::google::protobuf::internal::ConstantInitialized);

  inline Snapshot(const Snapshot& from) : Snapshot(nullptr, from) {}
  inline Snapshot(Snapshot&& from) noexcept
      : Snapshot(nullptr, std::move(from)) {}
  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Snapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
        &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Snapshot& a, Snapshot& b) { a.Swap(&b); }
  inline void Swap(Snapshot* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Snapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Snapshot* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Snapshot>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Snapshot& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Snapshot& from) { Snapshot::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Snapshot* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.Snapshot"; }

 protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  Snapshot(::google::protobuf::Arena* arena, const Snapshot& from);
  Snapshot(::google::protobuf::Arena* arena, Snapshot&& from) noexcept
      : Snapshot(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFrameSnapshotFieldNumber = 2,
  };
  // .panelclone.StateUpdate frameSnapshot = 2;
  bool has_framesnapshot() const;
  void clear_framesnapshot() ;
  const ::panelclone::StateUpdate& framesnapshot() const;
  PROTOBUF_NODISCARD ::panelclone::StateUpdate* release_framesnapshot();
  ::panelclone::StateUpdate* mutable_framesnapshot();
  void set_allocated_framesnapshot(::panelclone::StateUpdate* value);
  void unsafe_arena_set_allocated_framesnapshot(::panelclone::StateUpdate* value);
  ::panelclone::StateUpdate* unsafe_arena_release_framesnapshot();

  private:
  const ::panelclone::StateUpdate& _internal_framesnapshot() const;
  ::panelclone::StateUpdate* _internal_mutable_framesnapshot();

  public:
  // @@protoc_insertion_point(class_scope:panelclone.Snapshot)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Snapshot_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Snapshot& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::panelclone::StateUpdate* framesnapshot_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};
// -------------------------------------------------------------------

class PushUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:panelclone.PushUpdate) */ {
 public:
  inline PushUpdate() : PushUpdate(nullptr) {}
  ~PushUpdate() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PushUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline PushUpdate(const PushUpdate& from) : PushUpdate(nullptr, from) {}
  inline PushUpdate(PushUpdate&& from) noexcept
      : PushUpdate(nullptr, std::move(from)) {}
  inline PushUpdate& operator=(const PushUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PushUpdate& operator=(PushUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PushUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PushUpdate* internal_default_instance() {
    return reinterpret_cast<const PushUpdate*>(
        &_PushUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PushUpdate& a, PushUpdate& b) { a.Swap(&b); }
  inline void Swap(PushUpdate* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PushUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PushUpdate* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<PushUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PushUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PushUpdate& from) { PushUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PushUpdate* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "panelclone.PushUpdate"; }

 protected:
  explicit PushUpdate(::google::protobuf::Arena* arena);
  PushUpdate(::google::protobuf::Arena* arena, const PushUpdate& from);
  PushUpdate(::google::protobuf::Arena* arena, PushUpdate&& from) noexcept
      : PushUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatesFieldNumber = 1,
  };
  // repeated .panelclone.PushEvent updates = 1;
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  ::panelclone::PushEvent* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>* mutable_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>& _internal_updates() const;
  ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>* _internal_mutable_updates();
  public:
  const ::panelclone::PushEvent& updates(int index) const;
  ::panelclone::PushEvent* add_updates();
  const ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>& updates() const;
  // @@protoc_insertion_point(class_scope:panelclone.PushUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PushUpdate_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PushUpdate& from_msg);
    ::google::protobuf::RepeatedPtrField< ::panelclone::PushEvent > updates_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_event_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PushUpdate

// repeated .panelclone.PushEvent updates = 1;
inline int PushUpdate::_internal_updates_size() const {
  return _internal_updates().size();
}
inline int PushUpdate::updates_size() const {
  return _internal_updates_size();
}
inline void PushUpdate::clear_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updates_.Clear();
}
inline ::panelclone::PushEvent* PushUpdate::mutable_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:panelclone.PushUpdate.updates)
  return _internal_mutable_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>* PushUpdate::mutable_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:panelclone.PushUpdate.updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_updates();
}
inline const ::panelclone::PushEvent& PushUpdate::updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.PushUpdate.updates)
  return _internal_updates().Get(index);
}
inline ::panelclone::PushEvent* PushUpdate::add_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::panelclone::PushEvent* _add = _internal_mutable_updates()->Add();
  // @@protoc_insertion_point(field_add:panelclone.PushUpdate.updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>& PushUpdate::updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:panelclone.PushUpdate.updates)
  return _internal_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>&
PushUpdate::_internal_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updates_;
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::PushEvent>*
PushUpdate::_internal_mutable_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.updates_;
}

// -------------------------------------------------------------------

// PushEvent

// .panelclone.DrefValue drefWrite = 1;
inline bool PushEvent::has_drefwrite() const {
  return event_case() == kDrefWrite;
}
inline bool PushEvent::_internal_has_drefwrite() const {
  return event_case() == kDrefWrite;
}
inline void PushEvent::set_has_drefwrite() {
  _impl_._oneof_case_[0] = kDrefWrite;
}
inline void PushEvent::clear_drefwrite() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDrefWrite) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.drefwrite_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.drefwrite_);
    }
    clear_has_event();
  }
}
inline ::panelclone::DrefValue* PushEvent::release_drefwrite() {
  // @@protoc_insertion_point(field_release:panelclone.PushEvent.drefWrite)
  if (event_case() == kDrefWrite) {
    clear_has_event();
    auto* temp = _impl_.event_.drefwrite_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drefwrite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::panelclone::DrefValue& PushEvent::_internal_drefwrite() const {
  return event_case() == kDrefWrite ? *_impl_.event_.drefwrite_ : reinterpret_cast<::panelclone::DrefValue&>(::panelclone::_DrefValue_default_instance_);
}
inline const ::panelclone::DrefValue& PushEvent::drefwrite() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.PushEvent.drefWrite)
  return _internal_drefwrite();
}
inline ::panelclone::DrefValue* PushEvent::unsafe_arena_release_drefwrite() {
  // @@protoc_insertion_point(field_unsafe_arena_release:panelclone.PushEvent.drefWrite)
  if (event_case() == kDrefWrite) {
    clear_has_event();
    auto* temp = _impl_.event_.drefwrite_;
    _impl_.event_.drefwrite_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PushEvent::unsafe_arena_set_allocated_drefwrite(::panelclone::DrefValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_drefwrite();
    _impl_.event_.drefwrite_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:panelclone.PushEvent.drefWrite)
}
inline ::panelclone::DrefValue* PushEvent::_internal_mutable_drefwrite() {
  if (event_case() != kDrefWrite) {
    clear_event();
    set_has_drefwrite();
    _impl_.event_.drefwrite_ =
        ::google::protobuf::Message::DefaultConstruct<::panelclone::DrefValue>(GetArena());
  }
  return _impl_.event_.drefwrite_;
}
inline ::panelclone::DrefValue* PushEvent::mutable_drefwrite() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::panelclone::DrefValue* _msg = _internal_mutable_drefwrite();
  // @@protoc_insertion_point(field_mutable:panelclone.PushEvent.drefWrite)
  return _msg;
}

// .panelclone.DrefSend drefSend = 2;
inline bool PushEvent::has_drefsend() const {
  return event_case() == kDrefSend;
}
inline bool PushEvent::_internal_has_drefsend() const {
  return event_case() == kDrefSend;
}
inline void PushEvent::set_has_drefsend() {
  _impl_._oneof_case_[0] = kDrefSend;
}
inline void PushEvent::clear_drefsend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kDrefSend) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.drefsend_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.drefsend_);
    }
    clear_has_event();
  }
}
inline ::panelclone::DrefSend* PushEvent::release_drefsend() {
  // @@protoc_insertion_point(field_release:panelclone.PushEvent.drefSend)
  if (event_case() == kDrefSend) {
    clear_has_event();
    auto* temp = _impl_.event_.drefsend_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.drefsend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::panelclone::DrefSend& PushEvent::_internal_drefsend() const {
  return event_case() == kDrefSend ? *_impl_.event_.drefsend_ : reinterpret_cast<::panelclone::DrefSend&>(::panelclone::_DrefSend_default_instance_);
}
inline const ::panelclone::DrefSend& PushEvent::drefsend() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.PushEvent.drefSend)
  return _internal_drefsend();
}
inline ::panelclone::DrefSend* PushEvent::unsafe_arena_release_drefsend() {
  // @@protoc_insertion_point(field_unsafe_arena_release:panelclone.PushEvent.drefSend)
  if (event_case() == kDrefSend) {
    clear_has_event();
    auto* temp = _impl_.event_.drefsend_;
    _impl_.event_.drefsend_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PushEvent::unsafe_arena_set_allocated_drefsend(::panelclone::DrefSend* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_drefsend();
    _impl_.event_.drefsend_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:panelclone.PushEvent.drefSend)
}
inline ::panelclone::DrefSend* PushEvent::_internal_mutable_drefsend() {
  if (event_case() != kDrefSend) {
    clear_event();
    set_has_drefsend();
    _impl_.event_.drefsend_ =
        ::google::protobuf::Message::DefaultConstruct<::panelclone::DrefSend>(GetArena());
  }
  return _impl_.event_.drefsend_;
}
inline ::panelclone::DrefSend* PushEvent::mutable_drefsend() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::panelclone::DrefSend* _msg = _internal_mutable_drefsend();
  // @@protoc_insertion_point(field_mutable:panelclone.PushEvent.drefSend)
  return _msg;
}

inline bool PushEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void PushEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline PushEvent::EventCase PushEvent::event_case() const {
  return PushEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// StateUpdate

// uint32 frame = 1;
inline void StateUpdate::clear_frame() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_ = 0u;
}
inline ::uint32_t StateUpdate::frame() const {
  // @@protoc_insertion_point(field_get:panelclone.StateUpdate.frame)
  return _internal_frame();
}
inline void StateUpdate::set_frame(::uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:panelclone.StateUpdate.frame)
}
inline ::uint32_t StateUpdate::_internal_frame() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_;
}
inline void StateUpdate::_internal_set_frame(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_ = value;
}

// repeated .panelclone.PubValIndex publishedValueIndexes = 2;
inline int StateUpdate::_internal_publishedvalueindexes_size() const {
  return _internal_publishedvalueindexes().size();
}
inline int StateUpdate::publishedvalueindexes_size() const {
  return _internal_publishedvalueindexes_size();
}
inline void StateUpdate::clear_publishedvalueindexes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.publishedvalueindexes_.Clear();
}
inline ::panelclone::PubValIndex* StateUpdate::mutable_publishedvalueindexes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:panelclone.StateUpdate.publishedValueIndexes)
  return _internal_mutable_publishedvalueindexes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>* StateUpdate::mutable_publishedvalueindexes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:panelclone.StateUpdate.publishedValueIndexes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_publishedvalueindexes();
}
inline const ::panelclone::PubValIndex& StateUpdate::publishedvalueindexes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.StateUpdate.publishedValueIndexes)
  return _internal_publishedvalueindexes().Get(index);
}
inline ::panelclone::PubValIndex* StateUpdate::add_publishedvalueindexes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::panelclone::PubValIndex* _add = _internal_mutable_publishedvalueindexes()->Add();
  // @@protoc_insertion_point(field_add:panelclone.StateUpdate.publishedValueIndexes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>& StateUpdate::publishedvalueindexes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:panelclone.StateUpdate.publishedValueIndexes)
  return _internal_publishedvalueindexes();
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>&
StateUpdate::_internal_publishedvalueindexes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.publishedvalueindexes_;
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::PubValIndex>*
StateUpdate::_internal_mutable_publishedvalueindexes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.publishedvalueindexes_;
}

// repeated .panelclone.DrefValue drefChanges = 3;
inline int StateUpdate::_internal_drefchanges_size() const {
  return _internal_drefchanges().size();
}
inline int StateUpdate::drefchanges_size() const {
  return _internal_drefchanges_size();
}
inline void StateUpdate::clear_drefchanges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drefchanges_.Clear();
}
inline ::panelclone::DrefValue* StateUpdate::mutable_drefchanges(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:panelclone.StateUpdate.drefChanges)
  return _internal_mutable_drefchanges()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>* StateUpdate::mutable_drefchanges()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:panelclone.StateUpdate.drefChanges)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_drefchanges();
}
inline const ::panelclone::DrefValue& StateUpdate::drefchanges(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.StateUpdate.drefChanges)
  return _internal_drefchanges().Get(index);
}
inline ::panelclone::DrefValue* StateUpdate::add_drefchanges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::panelclone::DrefValue* _add = _internal_mutable_drefchanges()->Add();
  // @@protoc_insertion_point(field_add:panelclone.StateUpdate.drefChanges)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>& StateUpdate::drefchanges() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:panelclone.StateUpdate.drefChanges)
  return _internal_drefchanges();
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>&
StateUpdate::_internal_drefchanges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drefchanges_;
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::DrefValue>*
StateUpdate::_internal_mutable_drefchanges() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.drefchanges_;
}

// optional .panelclone.x264FrameData panelFrameData = 4;
inline bool StateUpdate::has_panelframedata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.panelframedata_ != nullptr);
  return value;
}
inline void StateUpdate::clear_panelframedata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.panelframedata_ != nullptr) _impl_.panelframedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::panelclone::x264FrameData& StateUpdate::_internal_panelframedata() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::panelclone::x264FrameData* p = _impl_.panelframedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::panelclone::x264FrameData&>(::panelclone::_x264FrameData_default_instance_);
}
inline const ::panelclone::x264FrameData& StateUpdate::panelframedata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.StateUpdate.panelFrameData)
  return _internal_panelframedata();
}
inline void StateUpdate::unsafe_arena_set_allocated_panelframedata(::panelclone::x264FrameData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.panelframedata_);
  }
  _impl_.panelframedata_ = reinterpret_cast<::panelclone::x264FrameData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:panelclone.StateUpdate.panelFrameData)
}
inline ::panelclone::x264FrameData* StateUpdate::release_panelframedata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::panelclone::x264FrameData* released = _impl_.panelframedata_;
  _impl_.panelframedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::panelclone::x264FrameData* StateUpdate::unsafe_arena_release_panelframedata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.StateUpdate.panelFrameData)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::panelclone::x264FrameData* temp = _impl_.panelframedata_;
  _impl_.panelframedata_ = nullptr;
  return temp;
}
inline ::panelclone::x264FrameData* StateUpdate::_internal_mutable_panelframedata() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.panelframedata_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::panelclone::x264FrameData>(GetArena());
    _impl_.panelframedata_ = reinterpret_cast<::panelclone::x264FrameData*>(p);
  }
  return _impl_.panelframedata_;
}
inline ::panelclone::x264FrameData* StateUpdate::mutable_panelframedata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::panelclone::x264FrameData* _msg = _internal_mutable_panelframedata();
  // @@protoc_insertion_point(field_mutable:panelclone.StateUpdate.panelFrameData)
  return _msg;
}
inline void StateUpdate::set_allocated_panelframedata(::panelclone::x264FrameData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.panelframedata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.panelframedata_ = reinterpret_cast<::panelclone::x264FrameData*>(value);
  // @@protoc_insertion_point(field_set_allocated:panelclone.StateUpdate.panelFrameData)
}

// -------------------------------------------------------------------

// x264FrameData

// int32 cols = 1;
inline void x264FrameData::clear_cols() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cols_ = 0;
}
inline ::int32_t x264FrameData::cols() const {
  // @@protoc_insertion_point(field_get:panelclone.x264FrameData.cols)
  return _internal_cols();
}
inline void x264FrameData::set_cols(::int32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:panelclone.x264FrameData.cols)
}
inline ::int32_t x264FrameData::_internal_cols() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cols_;
}
inline void x264FrameData::_internal_set_cols(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cols_ = value;
}

// int32 rows = 2;
inline void x264FrameData::clear_rows() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_ = 0;
}
inline ::int32_t x264FrameData::rows() const {
  // @@protoc_insertion_point(field_get:panelclone.x264FrameData.rows)
  return _internal_rows();
}
inline void x264FrameData::set_rows(::int32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:panelclone.x264FrameData.rows)
}
inline ::int32_t x264FrameData::_internal_rows() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rows_;
}
inline void x264FrameData::_internal_set_rows(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rows_ = value;
}

// int32 channels = 3;
inline void x264FrameData::clear_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_ = 0;
}
inline ::int32_t x264FrameData::channels() const {
  // @@protoc_insertion_point(field_get:panelclone.x264FrameData.channels)
  return _internal_channels();
}
inline void x264FrameData::set_channels(::int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:panelclone.x264FrameData.channels)
}
inline ::int32_t x264FrameData::_internal_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channels_;
}
inline void x264FrameData::_internal_set_channels(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channels_ = value;
}

// bytes image_bytes = 4;
inline void x264FrameData::clear_image_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_bytes_.ClearToEmpty();
}
inline const std::string& x264FrameData::image_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.x264FrameData.image_bytes)
  return _internal_image_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void x264FrameData::set_image_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.x264FrameData.image_bytes)
}
inline std::string* x264FrameData::mutable_image_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_bytes();
  // @@protoc_insertion_point(field_mutable:panelclone.x264FrameData.image_bytes)
  return _s;
}
inline const std::string& x264FrameData::_internal_image_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.image_bytes_.Get();
}
inline void x264FrameData::_internal_set_image_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_bytes_.Set(value, GetArena());
}
inline std::string* x264FrameData::_internal_mutable_image_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.image_bytes_.Mutable( GetArena());
}
inline std::string* x264FrameData::release_image_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.x264FrameData.image_bytes)
  return _impl_.image_bytes_.Release();
}
inline void x264FrameData::set_allocated_image_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.image_bytes_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_bytes_.IsDefault()) {
          _impl_.image_bytes_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:panelclone.x264FrameData.image_bytes)
}

// -------------------------------------------------------------------

// PubValIndex

// int32 index = 1;
inline void PubValIndex::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t PubValIndex::index() const {
  // @@protoc_insertion_point(field_get:panelclone.PubValIndex.index)
  return _internal_index();
}
inline void PubValIndex::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.PubValIndex.index)
}
inline ::int32_t PubValIndex::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void PubValIndex::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// string dataref = 2;
inline void PubValIndex::clear_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.ClearToEmpty();
}
inline const std::string& PubValIndex::dataref() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.PubValIndex.dataref)
  return _internal_dataref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PubValIndex::set_dataref(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.PubValIndex.dataref)
}
inline std::string* PubValIndex::mutable_dataref() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dataref();
  // @@protoc_insertion_point(field_mutable:panelclone.PubValIndex.dataref)
  return _s;
}
inline const std::string& PubValIndex::_internal_dataref() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dataref_.Get();
}
inline void PubValIndex::_internal_set_dataref(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(value, GetArena());
}
inline std::string* PubValIndex::_internal_mutable_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dataref_.Mutable( GetArena());
}
inline std::string* PubValIndex::release_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.PubValIndex.dataref)
  return _impl_.dataref_.Release();
}
inline void PubValIndex::set_allocated_dataref(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataref_.IsDefault()) {
          _impl_.dataref_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:panelclone.PubValIndex.dataref)
}

// int32 dref_index = 3;
inline void PubValIndex::clear_dref_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dref_index_ = 0;
}
inline ::int32_t PubValIndex::dref_index() const {
  // @@protoc_insertion_point(field_get:panelclone.PubValIndex.dref_index)
  return _internal_dref_index();
}
inline void PubValIndex::set_dref_index(::int32_t value) {
  _internal_set_dref_index(value);
  // @@protoc_insertion_point(field_set:panelclone.PubValIndex.dref_index)
}
inline ::int32_t PubValIndex::_internal_dref_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dref_index_;
}
inline void PubValIndex::_internal_set_dref_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dref_index_ = value;
}

// -------------------------------------------------------------------

// StateRequest

// repeated .panelclone.RegisterDref drefs = 2;
inline int StateRequest::_internal_drefs_size() const {
  return _internal_drefs().size();
}
inline int StateRequest::drefs_size() const {
  return _internal_drefs_size();
}
inline void StateRequest::clear_drefs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.drefs_.Clear();
}
inline ::panelclone::RegisterDref* StateRequest::mutable_drefs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:panelclone.StateRequest.drefs)
  return _internal_mutable_drefs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>* StateRequest::mutable_drefs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:panelclone.StateRequest.drefs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_drefs();
}
inline const ::panelclone::RegisterDref& StateRequest::drefs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.StateRequest.drefs)
  return _internal_drefs().Get(index);
}
inline ::panelclone::RegisterDref* StateRequest::add_drefs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::panelclone::RegisterDref* _add = _internal_mutable_drefs()->Add();
  // @@protoc_insertion_point(field_add:panelclone.StateRequest.drefs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>& StateRequest::drefs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:panelclone.StateRequest.drefs)
  return _internal_drefs();
}
inline const ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>&
StateRequest::_internal_drefs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.drefs_;
}
inline ::google::protobuf::RepeatedPtrField<::panelclone::RegisterDref>*
StateRequest::_internal_mutable_drefs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.drefs_;
}

// -------------------------------------------------------------------

// RegisterDref

// string dataref = 1;
inline void RegisterDref::clear_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.ClearToEmpty();
}
inline const std::string& RegisterDref::dataref() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.RegisterDref.dataref)
  return _internal_dataref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterDref::set_dataref(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.RegisterDref.dataref)
}
inline std::string* RegisterDref::mutable_dataref() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dataref();
  // @@protoc_insertion_point(field_mutable:panelclone.RegisterDref.dataref)
  return _s;
}
inline const std::string& RegisterDref::_internal_dataref() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dataref_.Get();
}
inline void RegisterDref::_internal_set_dataref(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(value, GetArena());
}
inline std::string* RegisterDref::_internal_mutable_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dataref_.Mutable( GetArena());
}
inline std::string* RegisterDref::release_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.RegisterDref.dataref)
  return _impl_.dataref_.Release();
}
inline void RegisterDref::set_allocated_dataref(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataref_.IsDefault()) {
          _impl_.dataref_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:panelclone.RegisterDref.dataref)
}

// int32 index = 2;
inline void RegisterDref::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t RegisterDref::index() const {
  // @@protoc_insertion_point(field_get:panelclone.RegisterDref.index)
  return _internal_index();
}
inline void RegisterDref::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.RegisterDref.index)
}
inline ::int32_t RegisterDref::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void RegisterDref::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// Snapshot

// .panelclone.StateUpdate frameSnapshot = 2;
inline bool Snapshot::has_framesnapshot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.framesnapshot_ != nullptr);
  return value;
}
inline void Snapshot::clear_framesnapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.framesnapshot_ != nullptr) _impl_.framesnapshot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::panelclone::StateUpdate& Snapshot::_internal_framesnapshot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::panelclone::StateUpdate* p = _impl_.framesnapshot_;
  return p != nullptr ? *p : reinterpret_cast<const ::panelclone::StateUpdate&>(::panelclone::_StateUpdate_default_instance_);
}
inline const ::panelclone::StateUpdate& Snapshot::framesnapshot() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.Snapshot.frameSnapshot)
  return _internal_framesnapshot();
}
inline void Snapshot::unsafe_arena_set_allocated_framesnapshot(::panelclone::StateUpdate* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.framesnapshot_);
  }
  _impl_.framesnapshot_ = reinterpret_cast<::panelclone::StateUpdate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:panelclone.Snapshot.frameSnapshot)
}
inline ::panelclone::StateUpdate* Snapshot::release_framesnapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::panelclone::StateUpdate* released = _impl_.framesnapshot_;
  _impl_.framesnapshot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::panelclone::StateUpdate* Snapshot::unsafe_arena_release_framesnapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.Snapshot.frameSnapshot)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::panelclone::StateUpdate* temp = _impl_.framesnapshot_;
  _impl_.framesnapshot_ = nullptr;
  return temp;
}
inline ::panelclone::StateUpdate* Snapshot::_internal_mutable_framesnapshot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.framesnapshot_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::panelclone::StateUpdate>(GetArena());
    _impl_.framesnapshot_ = reinterpret_cast<::panelclone::StateUpdate*>(p);
  }
  return _impl_.framesnapshot_;
}
inline ::panelclone::StateUpdate* Snapshot::mutable_framesnapshot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::panelclone::StateUpdate* _msg = _internal_mutable_framesnapshot();
  // @@protoc_insertion_point(field_mutable:panelclone.Snapshot.frameSnapshot)
  return _msg;
}
inline void Snapshot::set_allocated_framesnapshot(::panelclone::StateUpdate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.framesnapshot_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.framesnapshot_ = reinterpret_cast<::panelclone::StateUpdate*>(value);
  // @@protoc_insertion_point(field_set_allocated:panelclone.Snapshot.frameSnapshot)
}

// -------------------------------------------------------------------

// DrefIntArrayValue

// int32 value = 1;
inline void DrefIntArrayValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline ::int32_t DrefIntArrayValue::value() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefIntArrayValue.value)
  return _internal_value();
}
inline void DrefIntArrayValue::set_value(::int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefIntArrayValue.value)
}
inline ::int32_t DrefIntArrayValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void DrefIntArrayValue::_internal_set_value(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// uint32 index = 2;
inline void DrefIntArrayValue::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t DrefIntArrayValue::index() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefIntArrayValue.index)
  return _internal_index();
}
inline void DrefIntArrayValue::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefIntArrayValue.index)
}
inline ::uint32_t DrefIntArrayValue::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void DrefIntArrayValue::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// DrefFloatArrayValue

// float value = 1;
inline void DrefFloatArrayValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = 0;
}
inline float DrefFloatArrayValue::value() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefFloatArrayValue.value)
  return _internal_value();
}
inline void DrefFloatArrayValue::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefFloatArrayValue.value)
}
inline float DrefFloatArrayValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_;
}
inline void DrefFloatArrayValue::_internal_set_value(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_ = value;
}

// uint32 index = 2;
inline void DrefFloatArrayValue::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t DrefFloatArrayValue::index() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefFloatArrayValue.index)
  return _internal_index();
}
inline void DrefFloatArrayValue::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefFloatArrayValue.index)
}
inline ::uint32_t DrefFloatArrayValue::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void DrefFloatArrayValue::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// DrefByteValue

// bytes value = 1;
inline void DrefByteValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.ClearToEmpty();
}
inline const std::string& DrefByteValue::value() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.DrefByteValue.value)
  return _internal_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DrefByteValue::set_value(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.DrefByteValue.value)
}
inline std::string* DrefByteValue::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:panelclone.DrefByteValue.value)
  return _s;
}
inline const std::string& DrefByteValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.Get();
}
inline void DrefByteValue::_internal_set_value(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Set(value, GetArena());
}
inline std::string* DrefByteValue::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.Mutable( GetArena());
}
inline std::string* DrefByteValue::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.DrefByteValue.value)
  return _impl_.value_.Release();
}
inline void DrefByteValue::set_allocated_value(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.value_.IsDefault()) {
          _impl_.value_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:panelclone.DrefByteValue.value)
}

// uint32 size = 2;
inline void DrefByteValue::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0u;
}
inline ::uint32_t DrefByteValue::size() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefByteValue.size)
  return _internal_size();
}
inline void DrefByteValue::set_size(::uint32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefByteValue.size)
}
inline ::uint32_t DrefByteValue::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void DrefByteValue::_internal_set_size(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// DrefValue

// uint32 index = 1;
inline void DrefValue::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0u;
}
inline ::uint32_t DrefValue::index() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefValue.index)
  return _internal_index();
}
inline void DrefValue::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefValue.index)
}
inline ::uint32_t DrefValue::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void DrefValue::_internal_set_index(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// int32 intVal = 2;
inline bool DrefValue::has_intval() const {
  return value_case() == kIntVal;
}
inline void DrefValue::set_has_intval() {
  _impl_._oneof_case_[0] = kIntVal;
}
inline void DrefValue::clear_intval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntVal) {
    _impl_.value_.intval_ = 0;
    clear_has_value();
  }
}
inline ::int32_t DrefValue::intval() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefValue.intVal)
  return _internal_intval();
}
inline void DrefValue::set_intval(::int32_t value) {
  if (value_case() != kIntVal) {
    clear_value();
    set_has_intval();
  }
  _impl_.value_.intval_ = value;
  // @@protoc_insertion_point(field_set:panelclone.DrefValue.intVal)
}
inline ::int32_t DrefValue::_internal_intval() const {
  if (value_case() == kIntVal) {
    return _impl_.value_.intval_;
  }
  return 0;
}

// float floatVal = 3;
inline bool DrefValue::has_floatval() const {
  return value_case() == kFloatVal;
}
inline void DrefValue::set_has_floatval() {
  _impl_._oneof_case_[0] = kFloatVal;
}
inline void DrefValue::clear_floatval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatVal) {
    _impl_.value_.floatval_ = 0;
    clear_has_value();
  }
}
inline float DrefValue::floatval() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefValue.floatVal)
  return _internal_floatval();
}
inline void DrefValue::set_floatval(float value) {
  if (value_case() != kFloatVal) {
    clear_value();
    set_has_floatval();
  }
  _impl_.value_.floatval_ = value;
  // @@protoc_insertion_point(field_set:panelclone.DrefValue.floatVal)
}
inline float DrefValue::_internal_floatval() const {
  if (value_case() == kFloatVal) {
    return _impl_.value_.floatval_;
  }
  return 0;
}

// double doubleVal = 6;
inline bool DrefValue::has_doubleval() const {
  return value_case() == kDoubleVal;
}
inline void DrefValue::set_has_doubleval() {
  _impl_._oneof_case_[0] = kDoubleVal;
}
inline void DrefValue::clear_doubleval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kDoubleVal) {
    _impl_.value_.doubleval_ = 0;
    clear_has_value();
  }
}
inline double DrefValue::doubleval() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefValue.doubleVal)
  return _internal_doubleval();
}
inline void DrefValue::set_doubleval(double value) {
  if (value_case() != kDoubleVal) {
    clear_value();
    set_has_doubleval();
  }
  _impl_.value_.doubleval_ = value;
  // @@protoc_insertion_point(field_set:panelclone.DrefValue.doubleVal)
}
inline double DrefValue::_internal_doubleval() const {
  if (value_case() == kDoubleVal) {
    return _impl_.value_.doubleval_;
  }
  return 0;
}

// .panelclone.DrefByteValue byteVal = 7;
inline bool DrefValue::has_byteval() const {
  return value_case() == kByteVal;
}
inline bool DrefValue::_internal_has_byteval() const {
  return value_case() == kByteVal;
}
inline void DrefValue::set_has_byteval() {
  _impl_._oneof_case_[0] = kByteVal;
}
inline void DrefValue::clear_byteval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kByteVal) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.byteval_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.byteval_);
    }
    clear_has_value();
  }
}
inline ::panelclone::DrefByteValue* DrefValue::release_byteval() {
  // @@protoc_insertion_point(field_release:panelclone.DrefValue.byteVal)
  if (value_case() == kByteVal) {
    clear_has_value();
    auto* temp = _impl_.value_.byteval_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.byteval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::panelclone::DrefByteValue& DrefValue::_internal_byteval() const {
  return value_case() == kByteVal ? *_impl_.value_.byteval_ : reinterpret_cast<::panelclone::DrefByteValue&>(::panelclone::_DrefByteValue_default_instance_);
}
inline const ::panelclone::DrefByteValue& DrefValue::byteval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.DrefValue.byteVal)
  return _internal_byteval();
}
inline ::panelclone::DrefByteValue* DrefValue::unsafe_arena_release_byteval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:panelclone.DrefValue.byteVal)
  if (value_case() == kByteVal) {
    clear_has_value();
    auto* temp = _impl_.value_.byteval_;
    _impl_.value_.byteval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrefValue::unsafe_arena_set_allocated_byteval(::panelclone::DrefByteValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_byteval();
    _impl_.value_.byteval_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:panelclone.DrefValue.byteVal)
}
inline ::panelclone::DrefByteValue* DrefValue::_internal_mutable_byteval() {
  if (value_case() != kByteVal) {
    clear_value();
    set_has_byteval();
    _impl_.value_.byteval_ =
        ::google::protobuf::Message::DefaultConstruct<::panelclone::DrefByteValue>(GetArena());
  }
  return _impl_.value_.byteval_;
}
inline ::panelclone::DrefByteValue* DrefValue::mutable_byteval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::panelclone::DrefByteValue* _msg = _internal_mutable_byteval();
  // @@protoc_insertion_point(field_mutable:panelclone.DrefValue.byteVal)
  return _msg;
}

inline bool DrefValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DrefValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline DrefValue::ValueCase DrefValue::value_case() const {
  return DrefValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// DrefSend

// string dataref = 1;
inline void DrefSend::clear_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.ClearToEmpty();
}
inline const std::string& DrefSend::dataref() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.DrefSend.dataref)
  return _internal_dataref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DrefSend::set_dataref(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.DrefSend.dataref)
}
inline std::string* DrefSend::mutable_dataref() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_dataref();
  // @@protoc_insertion_point(field_mutable:panelclone.DrefSend.dataref)
  return _s;
}
inline const std::string& DrefSend::_internal_dataref() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dataref_.Get();
}
inline void DrefSend::_internal_set_dataref(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.Set(value, GetArena());
}
inline std::string* DrefSend::_internal_mutable_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.dataref_.Mutable( GetArena());
}
inline std::string* DrefSend::release_dataref() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.DrefSend.dataref)
  return _impl_.dataref_.Release();
}
inline void DrefSend::set_allocated_dataref(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dataref_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.dataref_.IsDefault()) {
          _impl_.dataref_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:panelclone.DrefSend.dataref)
}

// int32 index = 2;
inline void DrefSend::clear_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = 0;
}
inline ::int32_t DrefSend::index() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefSend.index)
  return _internal_index();
}
inline void DrefSend::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:panelclone.DrefSend.index)
}
inline ::int32_t DrefSend::_internal_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.index_;
}
inline void DrefSend::_internal_set_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.index_ = value;
}

// int32 intVal = 3;
inline bool DrefSend::has_intval() const {
  return value_case() == kIntVal;
}
inline void DrefSend::set_has_intval() {
  _impl_._oneof_case_[0] = kIntVal;
}
inline void DrefSend::clear_intval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIntVal) {
    _impl_.value_.intval_ = 0;
    clear_has_value();
  }
}
inline ::int32_t DrefSend::intval() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefSend.intVal)
  return _internal_intval();
}
inline void DrefSend::set_intval(::int32_t value) {
  if (value_case() != kIntVal) {
    clear_value();
    set_has_intval();
  }
  _impl_.value_.intval_ = value;
  // @@protoc_insertion_point(field_set:panelclone.DrefSend.intVal)
}
inline ::int32_t DrefSend::_internal_intval() const {
  if (value_case() == kIntVal) {
    return _impl_.value_.intval_;
  }
  return 0;
}

// float floatVal = 4;
inline bool DrefSend::has_floatval() const {
  return value_case() == kFloatVal;
}
inline void DrefSend::set_has_floatval() {
  _impl_._oneof_case_[0] = kFloatVal;
}
inline void DrefSend::clear_floatval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kFloatVal) {
    _impl_.value_.floatval_ = 0;
    clear_has_value();
  }
}
inline float DrefSend::floatval() const {
  // @@protoc_insertion_point(field_get:panelclone.DrefSend.floatVal)
  return _internal_floatval();
}
inline void DrefSend::set_floatval(float value) {
  if (value_case() != kFloatVal) {
    clear_value();
    set_has_floatval();
  }
  _impl_.value_.floatval_ = value;
  // @@protoc_insertion_point(field_set:panelclone.DrefSend.floatVal)
}
inline float DrefSend::_internal_floatval() const {
  if (value_case() == kFloatVal) {
    return _impl_.value_.floatval_;
  }
  return 0;
}

// string stringVal = 5;
inline bool DrefSend::has_stringval() const {
  return value_case() == kStringVal;
}
inline void DrefSend::set_has_stringval() {
  _impl_._oneof_case_[0] = kStringVal;
}
inline void DrefSend::clear_stringval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStringVal) {
    _impl_.value_.stringval_.Destroy();
    clear_has_value();
  }
}
inline const std::string& DrefSend::stringval() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:panelclone.DrefSend.stringVal)
  return _internal_stringval();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DrefSend::set_stringval(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringVal) {
    clear_value();

    set_has_stringval();
    _impl_.value_.stringval_.InitDefault();
  }
  _impl_.value_.stringval_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:panelclone.DrefSend.stringVal)
}
inline std::string* DrefSend::mutable_stringval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stringval();
  // @@protoc_insertion_point(field_mutable:panelclone.DrefSend.stringVal)
  return _s;
}
inline const std::string& DrefSend::_internal_stringval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStringVal) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.stringval_.Get();
}
inline void DrefSend::_internal_set_stringval(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringVal) {
    clear_value();

    set_has_stringval();
    _impl_.value_.stringval_.InitDefault();
  }
  _impl_.value_.stringval_.Set(value, GetArena());
}
inline std::string* DrefSend::_internal_mutable_stringval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStringVal) {
    clear_value();

    set_has_stringval();
    _impl_.value_.stringval_.InitDefault();
  }
  return _impl_.value_.stringval_.Mutable( GetArena());
}
inline std::string* DrefSend::release_stringval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:panelclone.DrefSend.stringVal)
  if (value_case() != kStringVal) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.stringval_.Release();
}
inline void DrefSend::set_allocated_stringval(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_stringval();
    _impl_.value_.stringval_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:panelclone.DrefSend.stringVal)
}

inline bool DrefSend::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void DrefSend::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline DrefSend::ValueCase DrefSend::value_case() const {
  return DrefSend::ValueCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace panelclone


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_event_2eproto_2epb_2eh
